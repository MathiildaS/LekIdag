

### UC-1 - Slumpa en lek baserat på ålder och plats

**Spårbarhet**: K-1

**Precondition:** Uppkoppling till MongoDB Atlas som har ett antal dokument med lekar sparade.

**Postcondition**: Att en slumpad lek presenteras för användaren, baserat på den ålder och plats användaren valt.

**Huvudscenarie**

1. Startar när användaren klickar på knappen "Slumpa en lek"
2. Användaren väljer mellan vilket åldersspann leken ska passa.
3. Användaren väljer om leken ska ske inomhus eller utomhus.
4. En slumpad lek baserad på valda parametrar visas för användaren.

## Manuella testfall

### TC1.0 - Verifiera MongoDB Atlas anslutning lokalt

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-0.4

**Beroenden:** K-1.1

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Huvudscenarie:** Anslutningen lyckas och servern startar.

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Kontrollera loggmeddelanden.

**Förväntat resultat**

Loggmeddelande som säger att anslutningen lyckades och att servern körs på [http://localhost:5000](http://localhost:5000)

---

### TC1.1.1 - Testa API via Postman (lokalt)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.2, K-1.3, K-1.4

**Beroenden:** K-1.1

**Miljö:** Lokal utvecklingsmiljö med Docker Compose

**Huvudscenarie:** Bli presenterad med en slumpad lek vid anrop till API med angiven ålder och plats.

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Postman, Webbläsare

**Indata:**

* **Key:** age **Value:** 0-1
* **Key:** location **Value**: Inomhus

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök Postman Agent.
5. Skicka en GET-förfrågan till `http://localhost:5000/api/v1/games/random`
6. Fyll i följande parametrar under fliken params:

   **Key:** age **Value**: 0-1

   **Key:** location **Value:** indoor
7. Skicka förfrågan.

**Förväntat resultat**

Statuskod 200 och ett JSON-objekt med följande fält: title, instructions, age och location.

---

### TC1.1.2 - Testa API via Postman (produktionsmiljö)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.2, K-1.3, K-1.4

**Beroenden:** K-1.1

**Miljö:** Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Huvudscenarie:** Bli presenterad med en slumpad lek vid anrop till API med angiven ålder och plats i den driftsatta miljön.

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Postman, Webbläsare

**Indata:**

* **Key:** age **Value:** 0-1
* **Key:** location **Value**: Inomhus

**Steg**

1. Besök Postman
2. Skicka en GET-förfrågan till https://cscloud8-46.lnu.se/api/v1/games/random
3. Fyll i följande parametrar under fliken params:

   **Key:** age **Value**: 0-1

   **Key:** location **Value:** indoor
4. Skicka förfrågan.

**Förväntat resultat**

Statuskod 200 och ett JSON-objekt med följande fält: title, instructions, age och location.

---

### TC1.2.1 - Testa bli presenterad en lek (Lokalt)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.5, K-1.6

**Huvudscenarie:** Bli presenterad med en slumpad lek, baserat på valda parametrar, efter tre klick.

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök[ http://localhost:5173](http://localhost:5173) i webbläsaren.
5. Klicka på knappen "Slumpa en lek" i menyn i headern.
6. Klicka på knappen "0-1" för att välja ålder.
7. Klicka på knappen "Inomhus" för att välja plats.

**Förväntat resultat**

En lek presenteras med titel och instruktioner.

---

### TC1.2.2 - Testa bli presenterad en lek (Produktionsmiljö)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.5, K-1.6

**Huvudscenarie:** Bli presenterad med en slumpad lek, baserat på valda parametrar, efter tre klick.

**Miljö**: Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Webbläsaren

**Steg**

1. Besök webbsidan https://cscloud8-46.lnu.se/
2. Klicka på knappen "Slumpa en lek" i menyn i headern.
3. Klicka på knappen "0-1" för att välja ålder.
4. Klicka på knappen "Inomhus" för att välja plats.

**Förväntat resultat**

En lek presenteras med titel och instruktioner.

---

### TC1.3.1 - Testa slumpmässig funktion (lokalt)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.5, K-1.6

**Huvudscenarie:** Bli presenterad med en ny lek efter att ha blivit presenterad med en första lek.

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök[ http://localhost:5173](http://localhost:5173) i webbläsaren.
5. Klicka på knappen "Slumpa en lek" i menyn i headern.
6. Klicka på knappen "0-1" för att välja ålder.
7. Klicka på knappen "Inomhus" för att välja plats.
8. Klicka på knappen "Slumpa en ny lek!" som visas nedanför den befintliga lekens instruktioner.

**Förväntat resultat**

En ny lek presenteras med titel och instruktioner.

---

### TC1.3.2 - Testa slumpmässig funktion (produktionsmiljö)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.5, K-1.6

**Huvudscenarie:** Bli presenterad med en ny lek efter att ha blivit presenterad med en första lek.

**Miljö**: Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Webbläsaren

**Steg**

1. Besök webbsidan https://cscloud8-46.lnu.se/
2. Klicka på knappen "Slumpa en lek" i menyn i headern.
3. Klicka på knappen "0-1" för att välja ålder.
4. Klicka på knappen "Inomhus" för att välja plats.
5. Klicka på knappen "Slumpa en ny lek!" som visas nedanför den befintliga lekens instruktioner.

**Förväntat resultat**

En ny lek presenteras med titel och instruktioner.

---

### TC1.4.1 - Testa funktionen att börja om (lokalt)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.5, K-1.6

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Huvudscenarie:** Användaren ska kunna börja om och välja nya parametrar efter att ha blivit presenterad med en lek eller direkt via knappen "Slumpa en lek" i menyn.

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök[ http://localhost:5173](http://localhost:5173) i webbläsaren.
5. Klicka på knappen "Slumpa en lek" i menyn i headern.
6. Klicka på knappen "0-1".
7. Klicka på knappen "Inomhus"
8. Klicka på knappen "Börja om från början!" som visas nedanför den befintliga lekens instruktioner.

**Förväntat resultat**

Alternativ att välja ålder och plats visas igen.

---

### TC1.4.2 - Testa funktionen att börja om (produktionsmiljö)

**Use case**: UC-1 - Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.5, K-1.6

**Huvudscenarie:** Användaren ska kunna börja om och välja nya parametrar efter att ha blivit presenterad med en lek eller direkt via knappen "Slumpa en lek" i menyn.

**Miljö**: Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Webbläsaren

**Steg**

1. Besök webbsidan https://cscloud8-46.lnu.se/
2. Klicka på knappen "Slumpa en lek" i menyn i headern.
3. Klicka på knappen "0-1".
4. Klicka på knappen "Inomhus"
5. Klicka på knappen "Börja om från början!" som visas nedanför den befintliga lekens instruktioner.

**Förväntat resultat**

Alternativ att välja ålder och plats visas igen.

## Automatiserade testfall

### **AC1.1.1 - Hämta slumpad lek med matchande data**

**Use case:** UC-1 – Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.2, K-1.3, K-1.4, K-1.5

**Huvudscenario:** Databas returnerar en lek som matchar angiven ålder och plats och visas i terminalen

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Precondition**:

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltig OpenWeatherMap API-nyckel.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.
* Testfall som hanterar mockning av lek i databas finns i `gamesController.test.js`.

**Verktyg**: Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Kör följande kommando för att exekvera tester i backend-containern: `docker compose run --rm backend npm test`
4. Vänta på att testerna körs och observera resultatet.

**Förväntat resultat:**\
Testet passerar och bekräftar status kod 200 och ett JSON-objekt med fälten title och instructions som matchar den simulerade leken.

---

### **AC1.1.2 - Hämta slumpad lek med matchande data (produktionsmiljö)**

**Use case:** UC-1 – Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.2, K-1.3, K-1.4, K-1.5

**Miljö:** CI/CD-pipeline i GitLab

**Huvudscenarie:** Pipeline kör testet som passerar och en rapport visar att en lek presenteras.

**Precondition**:

* Projektet är pushat till GitLab
* CI/CD-pipeline är konfigurerad i `.gitlab-ci.yml`
* `jest.config.js` och `test/`-mapp är inkluderade i repo
* Testfall som hanterar mockning av lek i databas finns i `gamesController.test.js`.
* Pipelinesteget `backend-tests` är aktivt och kör `npm run test`

**Verktyg**: GitLab CI/CD, Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Gör en test-ändring i koden.
4. Commita och pusha ändringen till GitLab.
5. Observera pipeline steget `backend-test` GitLab.

**Förväntat resultat:**\
Testet passerar och bekräftar status kod 200 och ett JSON-objekt med fälten title och instructions som matchar det simulerade leken.

---

### **AC1.2.1 - Testa tom databas och felmeddelande (lokalt)**

**Use case:** UC-1 – Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.2, K-1.3, K-1.4, K-1.7

**Miljö**: Lokal utvecklingsmiljö via Docker Compose

**Huvudscenario:** Inga pysel hittas i databasen för angivna parametrar och korrekt felmeddelande visas i terminalen.

**Precondition**:

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltig OpenWeatherMap API-nyckel.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.
* Testfall som hanterar mockning av tom databas finns i `gamesController.test.js`.

**Verktyg**: Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Kör följande kommando för att exekvera tester i backend-containern: `docker compose run --rm backend npm test`
4. Vänta på att testerna körs och observera resultatet.

**Förväntat resultat:**\
Testet passerar och bekräftar att fel hanteras korrekt. Status är 404 och resultatet innehåller { message: "No matching game found" }.

---

### **AC1.2.2 - Testa tom databas och felmeddelande (produktionsmiljö)**

**Use case:** UC-1 – Slumpa en lek baserat på ålder och plats

**Krav-ID:** K-1.2, K-1.3, K-1.4, K-1.7

**Miljö:** CI/CD-pipeline i GitLab

**Huvudscenarie:** Pipeline kör testet som passerar och en rapport visar att rätt felmeddelande presenteras.

**Precondition**:

* Projektet är pushat till GitLab
* CI/CD-pipeline är konfigurerad i `.gitlab-ci.yml`
* `jest.config.js` och `test/`-mapp är inkluderade i repo
* Testfall som hanterar mockning av tom databas finns i `gamesController.test.js`.
* Pipelinesteget `backend-tests` är aktivt och kör `npm run test`

**Verktyg**: GitLab CI/CD, Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Gör en test-ändring i koden.
4. Commita och pusha ändringen till GitLab.
5. Observera pipeline steget `backend-test` GitLab.

**Förväntat resultat:**\
Testet passerar och bekräftar att fel hanteras korrekt. Status är 404 och resultatet innehåller { message: "No matching game found" }.