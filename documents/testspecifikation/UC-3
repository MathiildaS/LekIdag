

# UC-3 - Slumpa en utmaning baserat på ålder

**Spårbarhet**: K-3

**Precondition:** Uppkoppling till MongoDB Atlas som har ett antal dokument med utmaningar sparade.

**Postcondition**: Att en slumpad utmaning med ett lösningsförslag presenteras för användaren, baserat på den ålder användaren valt.

**Huvudscenarie**

1. Startar när användaren klickar på knappen "Anta utmaning" i menyn.
2. Användaren väljer mellan vilket åldersspann utmaningen ska passa.
3. En slumpad utmaning baserat på valda parametrar visas för användaren.

## Manuella testfall

### TC3.0 - Verifiera MongoDB Atlas anslutning lokalt

**Krav-ID:** K-0.4

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder

**Beroenden:** K-3.1

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Huvudscenarie:** Anslutningen lyckas och servern startar.

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Kontrollera loggmeddelanden.

**Förväntat resultat**

Loggmeddelande som säger att anslutningen lyckades och att servern körs på [http://localhost:5000](http://localhost:5000)

---

### TC3.1.1 - Testa API via Postman (lokalt)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.2, K-3.3

**Beroenden:** K-3.1

**Huvudscenarie:** Bli presenterad med en slumpad utmaning vid anrop till API med angiven ålder.

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Postman, Webbläsare

**Indata:**

* **Key:** age **Value:** 0-1
* **Key:** location **Value**: Inomhus

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök Postman Agent.
5. Skicka en GET-förfrågan till `http://localhost:5000/api/v1/challenges/random`
6. Fyll i följande parametrar under fliken params:

   **Key**: age **Value:** 0-1
7. Skicka förfrågan.

**Förväntat resultat**

Statuskod 200 och ett JSON-objekt med följande fält: title, instructions, solution och age.

---

### TC3.1.2 - Testa API via Postman (produktionsmiljö)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.2, K-3.3

**Beroenden:** K-3.1

**Miljö:** Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Huvudscenarie:** Bli presenterad med en slumpad utmaning vid anrop till API med angiven ålder.

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Postman, Webbläsare

**Indata:**

* **Key:** age **Value:** 0-1
* **Key:** location **Value**: Inomhus

**Steg**

1. Besök Postman
2. Skicka en GET-förfrågan till [https://cscloud8-46.lnu.se/api/v1/challenges/random](https://cscloud8-46.lnu.se/api/v1/games/random)
3. Fyll i följande parametrar under fliken params:

   **Key:** age **Value**: 0-1
4. Skicka förfrågan.

**Förväntat resultat**

Statuskod 200 och ett JSON-objekt med följande fält: title, instructions, solution och age.

---

### TC3.2.1 - Testa bli presenterad en utmaning (Lokalt)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder och plats

**Krav-ID:** K-3.4

**Miljö**: Lokal utvecklingsmiljö via Docker Compose

**Huvudscenarie:** Bli presenterad med en slumpad utmaning, baserat på valda parametrar, efter tre klick.

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök[ http://localhost:5173](http://localhost:5173) i webbläsaren.
5. Besök `http://localhost:5173`
6. Klicka på knappen "Anta utmaning" i menyn i headern.
7. Klicka på knappen "0-1" för att välja ålder.

**Förväntat resultat**

En utmaning visas med titel, instruktioner och lösningsförslag.

---

### TC3.2.2 - Testa bli presenterad en utmaning (Produktionsmiljö)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder och plats

**Krav-ID:** K-3.4

**Huvudscenarie:** Bli presenterad med en slumpad utmaning, baserat på valda parametrar, efter tre klick.

**Miljö**: Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Webbläsaren

**Steg**

1. Besök webbsidan https://cscloud8-46.lnu.se/
2. Klicka på knappen "Anta utmaning" i menyn i headern.
3. Klicka på knappen "0-1" för att välja ålder.

**Förväntat resultat**

En utmaning visas med titel, instruktioner och lösningsförslag.

---

### TC3.3.1 - Testa slumpmässig funktion (lokalt)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.4

**Huvudscenarie:** Bli presenterad med en ny utmaning efter att ha blivit presenterad med en första utmaning.

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök[ http://localhost:5173](http://localhost:5173) i webbläsaren.
5. Klicka på knappen "Anta utmaning" i menyn i headern.
6. Klicka på knappen "0-1" för att välja ålder.
7. Klicka på knappen "Slumpa en ny utmaning!" som visas nedanför den befintliga utmaningen.

**Förväntat resultat**

En ny utmaning presenteras med titel och instruktioner samt lösningsförslag.

---

### TC3.3.2 - Testa slumpmässig funktion (Produktionsmiljö)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.4

**Huvudscenarie:** Bli presenterad med en ny utmaning efter att ha blivit presenterad med en första utmaning.

**Miljö**: Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Webbläsaren

**Steg**

1. Besök webbsidan https://cscloud8-46.lnu.se/
2. Klicka på knappen "Anta utmaning" i menyn i headern.
3. Klicka på knappen "0-1" för att välja ålder.
4. Klicka på knappen "Slumpa en ny utmaning!" som visas nedanför den befintliga utmaningen.

**Förväntat resultat**

En ny utmaning presenteras med titel och instruktioner samt lösningsförslag.

---

### TC3.4.1 - Testa funktionen att börja om (lokalt)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.4

**Huvudscenarie:** Användaren ska kunna börja om och välja nya parametrar efter att ha blivit presenterad med en utmaning eller direkt via knappen "Anta utmaning" i menyn.

**Miljö**: Lokal utvecklingsmiljö med Docker Compose

**Precondition:**

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltiga API-nycklar.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.

**Verktyg**: Visual Studio Code, Webbläsaren

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Bygg och starta utvecklingsmiljön genom att köra kommandot `docker compose -f docker-compose.yml -f docker-compose.development.yml up --build` i terminalen.
4. Besök[ http://localhost:5173](http://localhost:5173) i webbläsaren.
5. Klicka på knappen "Anta utmaning" i menyn i headern.
6. Klicka på knappen "0-1".
7. Klicka på knappen "Börja om från början!" som visas nedanför den befintliga utmaningen.

**Förväntat resultat**

Alternativ att välja ålder visas igen.

---

### TC3.4.2 - Testa funktionen att börja om (Produktionsmiljö)

**Use case**: UC-3 - Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.4

**Huvudscenarie:** Användaren ska kunna börja om och välja nya parametrar efter att ha blivit presenterad med en utmaning eller direkt via knappen "Anta utmaning" i menyn.

**Miljö**: Produktionsmiljö (CSCloud via NGINX och Docker Compose)

**Precondition**:

* Applikationen är driftsatt på https://cscloud8-46.lnu.se
* Frontend är korrekt byggd och visas vid besök på ovanstående URL.
* NGINX är korrekt konfigurerad för att skicka vidare förfrågningar till backend
* MongoDB Atlas är ansluten
* SSL-certifikat är aktivt och användaren når applikationen via HTTPS.
* Frontend skickar korrekta HTTP-anrop till backend som svarar korrekt på dessa.
* Miljövariabler är korrekt konfigurerade i GitLab CI/CD.
* Docker containrar är igång, bygger och kör rätt versioner.
* Senaste versionen är pushad och deployad via CI/CD-pipeline utan fel.

**Verktyg**: Webbläsaren

**Steg**

1. Besök webbsidan https://cscloud8-46.lnu.se/
2. Klicka på knappen "Anta utmaning" i menyn i headern.
3. Klicka på knappen "0-1".
4. Klicka på knappen "Börja om från början!" som visas nedanför den befintliga utmaningen.

**Förväntat resultat**

Alternativ att välja ålder visas igen.

## Automatiserade testfall

### **AC3.1.1 - Hämta slumpad utmaning med matchande data (lokalt)**

**Use case:** UC-3 – Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.2, K-3.3, K-3.4

**Huvudscenario:** Databas returnerar en utmaning som matchar angiven ålder och presenteras i terminalen.

**Miljö**: Lokal utvecklingsmiljö via Docker Compose

**Precondition**:

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltig OpenWeatherMap API-nyckel.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.
* Testfall som hanterar mockning av utmaning i databas finns i `challengesController.test.js`.

**Verktyg**: Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Kör följande kommando för att exekvera tester i backend-containern: `docker compose run --rm backend npm test`
4. Vänta på att testerna körs och observera resultatet.

**Förväntat resultat:**\
Testet passerar och bekräftar statuskod 200 och ett JSON-objekt med fälten title och instructions samt lösningsförslag som matchar den simulerade utmaningen.

---

### **AC3.1.2 - Hämta slumpad utmaning med matchande data (produktionsmiljö)**

**Use case:** UC-3 – Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.2, K-3.3, K-3.4

**Miljö:** CI/CD-pipeline i GitLab

**Huvudscenarie:** Pipeline kör testet som passerar och en rapport visar att en utmaning presenteras.

**Precondition**:

* Projektet är pushat till GitLab
* CI/CD-pipeline är konfigurerad i `.gitlab-ci.yml`
* `jest.config.js` och `test/`-mapp är inkluderade i repo
* Testfall som hanterar mockning av utmaning i databas finns i `challengesController.test.js`.
* Pipelinesteget `backend-tests` är aktivt och kör `npm run test`

**Verktyg**: GitLab CI/CD, Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Gör en test-ändring i koden.
4. Commita och pusha ändringen till GitLab.
5. Observera pipeline steget `backend-test` GitLab.

**Förväntat resultat:**\
Testet passerar och bekräftar statuskod 200 och ett JSON-objekt med fälten title och instructions samt lösningsförslag som matchar den simulerade utmaningen.

---

### **AC3.2.1 - Testa tom databas och felmeddelande (lokalt)**

**Use case:** UC-3 – Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.5

**Huvudscenario:** Ingen utmaning hittas i databasen för angivna parametrar.

**Miljö**: Lokal utvecklingsmiljö via Docker Compose

**Precondition**:

* Projektet är klonat från GitLab och finns lokalt.
* Projektet är korrekt konfigurerat med .env-fil med giltig OpenWeatherMap API-nyckel.
* Docker och Docker Compose är installerat.
* Docker Desktop är igång
* `Dockerfile` för både frontend och backend är korrekt konfigurerade för utvecklingsmiljö.
* `docker-compose.yml` och` docker-compose.development.yml` finns och är korrekt konfigurerad för utvecklingsmiljö.
* Testfall som hanterar mockning av tom databas finns i `challengesController.test.js`.

**Verktyg**: Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Kör följande kommando för att exekvera tester i backend-containern: `docker compose run --rm backend npm test`
4. Vänta på att testerna körs och observera resultatet.

**Förväntat resultat:**\
Testet passerar och bekräftar att fel hanteras korrekt. Status är 404 och resultatet innehåller { message: "No matching challenges found" }.

---

### **AC3.2.2 - Testa tom databas och felmeddelande (produktionsmiljö)**

**Use case:** UC-3 – Slumpa en utmaning baserat på ålder

**Krav-ID:** K-3.5

**Miljö:** CI/CD-pipeline i GitLab

**Huvudscenarie:** Pipeline kör testet som passerar och en rapport visar att rätt felmeddelande presenteras.

**Precondition**:

* Projektet är pushat till GitLab
* CI/CD-pipeline är konfigurerad i `.gitlab-ci.yml`
* `jest.config.js` och `test/`-mapp är inkluderade i repo
* Testfall som hanterar mockning av tom databas finns i `challengesController.test.js`.
* Pipelinesteget `backend-tests` är aktivt och kör `npm run test`

**Verktyg**: GitLab CI/CD, Visual Studio Code, Jest, Node.js

**Steg**

1. Öppna project-lekidag i Visual Studio Code.
2. Öppna ny terminal i Visual Studio Code.
3. Gör en test-ändring i koden.
4. Commita och pusha ändringen till GitLab.
5. Observera pipeline steget `backend-test` GitLab.

**Förväntat resultat:**\
Testet passerar och bekräftar att fel hanteras korrekt.

 Status är 404 och resultatet innehåller { message: "No matching challenges found" }.