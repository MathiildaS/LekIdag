# -------- Stage 1: Build stage --------
# Start with a Node.js image as base
FROM node:20.17.0-bookworm-slim AS base

# Install dumb-init, a simple process manager to handle signals correctly
RUN apt-get update \
  && apt-get install -y --no-install-recommends dumb-init \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Create a working directory in the image where the application will be placed.
WORKDIR /usr/src/app

# Copy the package.json and package-lock.json to the directory. 
# Keep these seperate to only rebuild if these change.
COPY package*.json ./

# Install only production dependencies
RUN npm ci --ignore-scripts --omit=dev

# -------- Stage 2: Run stage --------
# Start with a fresh Node.js image as base
FROM node:20.17.0-bookworm-slim

# Copy dumb-init from the builder stage to use as the entrypoint
COPY --from=base /usr/bin/dumb-init /usr/bin/dumb-init

# Set working directory
WORKDIR /usr/src/app

# Copy only the built dependencies from the base image
COPY --from=base --chown=node:node /usr/src/app/node_modules ./node_modules

COPY --chown=node:node keys ./keys

# Copy the rest of the src code
COPY --chown=node:node . .

# Set ownership of app directory
RUN chown -R node:node /usr/src/app

# Switch to a non-root user for security
USER node

# Expose the backend port that the application listens to.
EXPOSE 5000

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000

# Start the application using dumb-init
CMD ["dumb-init", "node", "src/server.js"]